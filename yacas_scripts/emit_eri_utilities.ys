EvalSubexpression( _exprList, _name2eval, _name2extract, _subexprList, _csl  ) <-- [
    Local(s, new'ints, s);
    For (i := 1, i <= Length(exprList), i++) [
        s := Eval(name2eval @ Tail(exprList[i][2]));
        s := CSE'SubstituteTaggedSubexpressions(subexprList, s);
        // {new'ints, s} := CSE'Extract( s, name2extract );
        // subexprList := Concat( subexprList, new'ints );
        s := CSE'SubstituteTaggedSubexpressions(csl, s);
        {s, c} := CSE(s);
        csl := Concat(csl, c);
        DestructiveReplace(exprList, i, {exprList[i][1], s});
    ];
    {exprList, subexprList, csl};
];

EvalSubexpression( _exprList, _name2eval,  _csl  ) <-- [
    Local(s, new'ints, s);
    For (i := 1, i <= Length(exprList), i++) [
        s := Eval(name2eval @ Tail(exprList[i][2]));

        s := CSE'SubstituteTaggedSubexpressions(csl, s);
        {s, c} := CSE(s);
        csl := Concat(csl, c);
        DestructiveReplace(exprList, i, {exprList[i][1], s});
    ];
    { exprList, csl};
];

MoveAtoms2Csl(_exprList, _csl, _g) <-- [
    i := 1;
    While (i <= Length(exprList)) [
        t := exprList[i];
        c := t[1];
        v := t[2];
        If (IsAtom(v), [
            g := Subst(c, v) g;
            csl := Subst(c, v) csl;
            DestructiveDelete(exprList, i);
        ], [
            DestructiveReplace(exprList, i, {c, Listify(v)});
            i := i + 1;
        ]);
    ];
    csl := Concat( csl, exprList);
    {csl, g};
];

MoveAtoms2Csl2(_exprList, _csl, _g, _mainCsl) <-- [
	Local(i, newExpr);
    i := 1;
    newExpr := {};
    While (i <= Length(exprList)) [
        t := exprList[i];
        c := t[1];
        v := t[2];
        If (IsAtom(v), [
            Echo("//atom: ":String(c) : " " : String(v) );
            g := Subst(c, v) g;
            csl := Subst(c, v) csl;
            mainCsl := Subst(c, v) mainCsl;
	    	// DestructiveReplace(exprList, i, {c, {*,1,v} });
            DestructiveDelete(exprList, i);
            If( Not IsNumber(v) , 
                If ( Assoc( String(v), newExpr ) = Empty, 
                	[
                    newExpr[String(v)] := {c};
                    Echo("// nowy klucz");
                    ],
                    [
                    	DestructiveAppend( newExpr[String(v)], c  );
                    	Echo("//dokladam do starego klucza");
                    ]
                ) 
            );
	   		// i := i + 1;
        ], [
            DestructiveReplace(exprList, i, {c, Listify(v)});
            i := i + 1;
        ]);
    ];
    csl := Concat( csl, exprList);
    {csl, g, exprList, newExpr, mainCsl};
];


d2ERI'Csl( _csl, _derivE, _d2r2, _dr2, _r2, _ints, _g ) <-- [


    {derivE, ints, csl} := EvalSubexpression( derivE, "DerivE", "HoldERI", ints, csl  );
    
    {csl, g } := MoveAtoms2Csl(derivE, csl, g);

    //###################d2r2#############################

    { d2r2, csl} := EvalSubexpression( d2r2, "d2R2e", csl  );
    { csl, g } := MoveAtoms2Csl(d2r2, csl, g);

    //#######################dr2##############################

    { dr2, csl} := EvalSubexpression( dr2, "dR2el", csl  );
    { csl, g } := MoveAtoms2Csl(dr2, csl, g);

    //########################r2##############################

    { r2, csl} := EvalSubexpression( r2, "R", csl  );
    { csl, g } := MoveAtoms2Csl(r2, csl, g);
 
    //#######################Cart2Herm#######################
    {ints, csl} := EvalSubexpression( ints, "Cart2HermExpCoeff", csl  );

    // ints := CSE'SubstituteTaggedSubexpressions(csl, ints);
    // {ints, c} := CSE(ints);
    // csl := Concat(csl, c);
    
    
    {csl, g} := MoveAtoms2Csl(ints, csl, g);
    //#################Koniec###############################
    { csl, g};
];