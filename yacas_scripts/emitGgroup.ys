//inline
EmitGgroup(  _l1, _l2, _l3, _l4, _o, _g, _csl, _d2result, _gInd ) <-- [
	Echo("void second_derivative_ee_" : CppForm(l1) : CppForm(l2) : CppForm(l3) : CppForm(l4) : "_" : CppForm(o[1]): CppForm(o[2]) : "_" : d2result: "_" : CppForm(gInd) :"(");
    Echo("    const double ae,");
    Echo("    const double xA,");
    Echo("    const double yA,");
    Echo("    const double zA,");
    Echo("    const double be,");
    Echo("    const double xB,");
    Echo("    const double yB,");
    Echo("    const double zB,");
    Echo("    const double ce,");
    Echo("    const double xC,");
    Echo("    const double yC,");
    Echo("    const double zC,");
    Echo("    const double de,");
    Echo("    const double xD,");
    Echo("    const double yD,");
    Echo("    const double zD,");
    Echo("    const double* const bs,");
    Echo("    double* const r2,");
    Echo("    double* const dr2,");
    Echo("    double* const d2r2,");
    Echo("    double* const c2h,");
    Echo("    double* const dE,");
    Echo("    double* const g)");
    Echo("{");

    Echo("    const double p = ae + be;");
    Echo("    const double q = ce + de;");

    Echo("    const double xP = (ae * xA + be * xB) / p;");
    Echo("    const double yP = (ae * yA + be * yB) / p;");
    Echo("    const double zP = (ae * zA + be * zB) / p;");

    Echo("    const double xQ = (ce * xC + de * xD) / q;");
    Echo("    const double yQ = (ce * yC + de * yD) / q;");
    Echo("    const double zQ = (ce * zC + de * zD) / q;");

    g := CSE'SubstituteTaggedSubexpressions(csl, g);
    {g, c} := CSE(g);
    csl := Concat(csl, c);

    edges := {};

    keys := Association'Create();
    t:= Transpose(csl)[1];
    ForEach(i, 1 .. Length(t))
        Association'Set(keys, t[i], i);
    
    ForEach (i, 1 .. Length(csl)) [
        vars := VarList(Eval(UnList(csl[i][2])));

        ForEach (var, vars) [
            j := Association'Get(keys, var);
            //j := Find(keys, var);
            If (j > 0, DestructiveAppend(edges, {j, i}));
        ];

    ];


    If (edges != {}, csl := TopologicalSort'Kahn(csl, edges) );

    ForEach(d, CSE'EmitDefinitions(CSE'GenerateAssignments(csl)))
            WriteString("    " : d : Nl());

    gInd :=1;
    ForEach( gEl , g ) [
    	Echo("    g[":String(gInd):"] = " : CppForm(gEl) : "; ");
    	gInd := gInd + 1;
    ];

    Echo("}");
];