Use("cse.ys");
Use("cpp_form.ys");
Use("shells.ys");
Use("cartesian_to_spherical.ys");
Use("hessian_ne_coulomb.ys");

MaxEvalDepth(100000);

EmitVneSecondDerivative(_l1, _l2, _q) <-- [
    Echo("");
    Echo("    // Automatically generated, do not edit");
    //Echo("    static inline");
    Echo("    void vne_second_derivative_" : CppForm(l1) : CppForm(l2) : "_" : CppForm(q[1]) : CppForm(q[2]):"(");
    Echo("        double ae, double be,");
    Echo("        double xA, double yA, double zA,");
    Echo("        double xB, double yB, double zB,");
    Echo("        double xC, double yC, double zC,");
    Echo("        const double* bs,");
    //Echo("        ublas::matrix<double>& d2nexx,");
    //Echo("        ublas::matrix<double>& d2nexy,");
    //Echo("        ublas::matrix<double>& d2nexz,");
    //Echo("        ublas::matrix<double>& d2neyx,");
    //Echo("        ublas::matrix<double>& d2neyy,");
    //Echo("        ublas::matrix<double>& d2neyz,");
    //Echo("        ublas::matrix<double>& d2nezx,");
    //Echo("        ublas::matrix<double>& d2nezy,");
    //Echo("        ublas::matrix<double>& d2nezz,");
    Echo("        double* const d2nexx,");
    Echo("        double* const d2nexy,");
    Echo("        double* const d2nexz,");
    Echo("        double* const d2neyx,");
    Echo("        double* const d2neyy,");
    Echo("        double* const d2neyz,");
    Echo("        double* const d2nezx,");
    Echo("        double* const d2nezy,");
    Echo("        double* const d2nezz,");
    Echo("        std::size_t matrix_size, ");
    Echo("        std::size_t Ai, std::size_t Bi)");
    Echo("    {");



    Local(c, d, csl, g, gs, nc1, nc2, ns1, ns2, m1, m2, ints, expanded'ints, ints'csl, components, d2result, numOfCases);

    nc1 := (l1 + 1) * (l1 + 2) / 2;
    nc2 := (l2 + 1) * (l2 + 2) / 2;

    ns1 := 2 * l1 + 1;
    ns2 := 2 * l2 + 1;

    g := {};
    csl := {};
    ints := {};
    d := {};

    components := { {1,1}, {1,2},  {1,3}, {2, 1},{2,2}, {2,3},  {3, 1},{3,2}, {3,3} };
    d2result := {"d2nexx", "d2nexy", "d2nexz", "d2neyx",  "d2neyy", "d2neyz","d2nezx", "d2nezy", "d2nezz"};
    numOfCases:=9;

    ForEach(m1, Shells[l1 + 1]) [
        ForEach(m2, Shells[l2 + 1]) [
            ForEach( caseInd, components) [
                DestructiveAppend(d, hessian'necoulombherm'part("HoldVne", m1, ae, m2, be, {xA, yA, zA}, {xB, yB, zB}, {xC, yC, zC}, bs, q, caseInd));
                //d :=Append(d, hessian'necoulombherm'part("HoldVne", m1, ae, m2, be, {xA, yA, zA}, {xB, yB, zB}, {xC, yC, zC}, bs, q, caseInd));
            	//d :={hessian'necoulombherm'part("HoldVne", m1, ae, m2, be, {xA, yA, zA}, {xB, yB, zB}, {xC, yC, zC}, bs, q, caseInd)};
            ];
            // substitute already found integrals
            d := CSE'SubstituteTaggedSubexpressions(ints, d);

           	 // extract new ones
            new'ints := Listify /@ CSE'FindFuncCalls(d, "HoldVne");
            new'ints := RemoveDuplicates(new'ints);

            // and keep them
            ForEach(i, new'ints) [
                uc := UniqueConstant();
                DestructiveAppend(ints, {uc, i});
            	d := Subst(UnList(i), uc) d;
            ];

            d := CSE'SubstituteTaggedSubexpressions(csl, d);
            {d, c} := CSE(d);

            DestructiveAppend(g, d);
            csl := Concat(csl, c); 
			d := {};
			
        ];
    ];

    expanded'ints := {};
    ints'csl := {};

    ForEach(i, ints) [
        Local(s);
        s := Eval("Cart2HermExpCoeff" @ Tail(i[2]));
        s := CSE'SubstituteTaggedSubexpressions(ints'csl, s);
        {s, c} := CSE(s);
        DestructiveAppend(expanded'ints, {i[1], s});
        ints'csl := Concat(ints'csl, c);
    ];

    {expanded'ints, c} := CSE(expanded'ints);
    ints'csl := Concat(ints'csl, c);

    ints := {};

    ForEach(i, expanded'ints)
        If (IsAtom(i[2]), [
            g := Subst(i[1], i[2]) g;
            csl := Subst(i[1], i[2]) csl;
        ], [
            DestructiveAppend(ints, {i[1], Listify(i[2])});
        ]);

    csl := Concat(ints'csl, ints, csl);

    g := CSE'SubstituteTaggedSubexpressions(csl, g);
    {g, c} := CSE(g);
    csl := Concat(csl, c);

    ForEach(d, CSE'EmitDefinitions(CSE'GenerateAssignments(csl)))
            WriteString("        " : d : Nl());
    
    For( caseInd :=1, caseInd <= numOfCases, caseInd++)[
        For(m1 := 0, m1 < nc1, m1++) [
            For(m2 := 0, m2 < nc2, m2++) [
                Local(index, t, n, tag);
                index := Concat(Shells[l1+1][m1+1], Shells[l2+1][m2+1]);
                t := 10^Length(index);
                For(n := 1, n <= Length(index), n++)
                    t := t + Reverse(index)[n] * 10^(n-1);
                v := ToString() Write(t);
                tag := v[Length(v) - 5 .. Length(v)];
                WriteString("        const double ": d2result[caseInd] : tag : " = " : CppForm(g[m1 * nc2 + m2 + 1][caseInd]) : ";" : Nl());
            ];
        ];
        
        gs := CartesianToSpherical(l1, l2, d2result[caseInd]);

        For(m1 := 0, m1 < ns1, m1++) [
            For(m2 := 0, m2 < ns2, m2++) [
                Echo("        ":d2result[caseInd]:"[ (Ai + " : CppForm(m1) : ")*matrix_size + Bi +" : CppForm(m2) : "] += " : CppForm(gs[m1+1][m2+1]) : ";");
            ];
        ];
    ];

    Echo("    }");
];

