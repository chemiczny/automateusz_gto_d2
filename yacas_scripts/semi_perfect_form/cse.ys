// For an expression e return a list of all simple subexpressions
Function("CSE'FindSimpleSubexpressions", {e})
[
   Local(r);
   r := {};
   
   If(Not IsAtom(e),
   [
      Local(p, l);
      l := Listify(e);

      If(Apply("And",(MapSingle("IsAtom",l))) And Not Head(l) = List,
         r := {l}, 
         ForEach(p, Tail(l)) r := Concat(r, CSE'FindSimpleSubexpressions(p))
      );
   ]);
   r;
];

// For a list of (listified) expressions return list of unique 
// expressions which are present more then once in the original 
// list
Function("CSE'RemoveUncommonSubexpressions", {cs})
[
   Local(r,h);
   r := {};
   While(cs != {}) [
       h := Head(cs);
       cs := Tail(cs);
       If(Contains(cs, h) And Not Contains(r, h), DestructiveAppend(r, h));
   ];
   r;
];

// For a list of (listified) expressions return list of 
// pairs (unique_id, expression)
Function("CSE'TagSubexpressions", {l})
[
   Local(r);
   r := {};
   ForEach(i, l) [
      Push(r, {UniqueConstant(), i});
   ];
   r;
];

// Given a list of pairs (identifier, listified_subexpression), replace 
// all occurences of subexpression in expression e with the corresponding
// identifier
Function("CSE'SubstituteTaggedSubexpressions", {sl, e})
[
   Local(r);
   r := e;
   ForEach(i, sl) [
      r := Subst(UnList(i[2]), i[1])r;
   ];
   r;
];

// Generate list of assignements from the list of pairs 
// (identifier, listified_expression)
Function("CSE'GenerateAssignments", {sl})
[
   Local(r);
   r := {};
   ForEach(i, sl) [
      Local(a);
      a := {:=, i[1], UnList(i[2]) };
      Push(r, UnList(a));
   ];
   r;
];

// Generate list of strings with declarations and initializations
// representing the assignements in al
Function("CSE'EmitDefinitions", {al})
[
   Local(r);
   r := {};
   ForEach(i, al) [
      Push(r, "const double " : CppForm(i) : ";");
   ];
   r;
];

// For an expression e:
//   - find all simple subexpressions present more then once
//   - generate unique ids for for each of them
//   - substitute them with the ids
//   - return substituded list of substitutions and substituted id
Function("CSE", {e})
[
   Local(re, csl, t);

   re := e;
   csl := {};
   t := {};
   
   Until(Length(t) = 0) [
      t := CSE'TagSubexpressions(CSE'RemoveUncommonSubexpressions(CSE'FindSimpleSubexpressions(re)));
      If(Length(t) != 0,
      [
         re := CSE'SubstituteTaggedSubexpressions(t, re);
         csl := Concat(csl, t);
      ]);
   ];

   { re, csl };
];

Function("CSE'FindFuncCalls", {e, f})
[
   Local(r);
   r := {};
   
   If(Type(e) = f, [
       DestructiveAppend(r, e);
   ], If (Not IsAtom(e), [
           Local(p, l);
           l := Listify(e);

           ForEach(p, Tail(l)) r := Concat(r, CSE'FindFuncCalls(p, f));
       ])
   );
   r;
];

Function("CSE'Extract", {expr, f})
[
    Local(e, i, l, csl, uc);

    e := expr;

    l := Listify /@ CSE'FindFuncCalls(e, f);
    l := RemoveDuplicates(l);

    csl := {};

    ForEach(i, l) [
        uc := UniqueConstant();
        DestructiveAppend(csl, {uc, i});
        e := Subst(UnList(i), uc) e;
    ];

    {csl, e};
];
