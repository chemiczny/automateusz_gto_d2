Use("emitGgroup.ys");
//inline
EchoSubfunctionBigLDivided(  _l1, _l2, _l3, _l4, _o, _groups, _ints , _g, _csl , _r2processed, _r2replaced, _c2hProcessed, _c2hReplaced, _d2r2, _dr2, _derivE, _d2result  ) <-- [
	{ g, csl, d2r2processed, d2r2replaced } := EchoSubfunction( d2result: "_d2r2", l1, l2, l3, l4, o, d2r2, "d2R2e", g, "d2r2", csl);
    // Echo("//csl po d2r2: ":csl);
    //#######################dr2##############################

    { g, csl, dr2processed, dr2replaced } := EchoSubfunction( d2result:"_dr2", l1, l2, l3, l4, o, dr2, "dR2el", g, "dr2", csl);
    // Echo("//csl po dr2: ":csl);

    //#######################Cart2Herm#######################
    // Echo("//csl po r2: ":csl);
    //Echo("//csl przed g: ":g);

    { g, csl, dEprocessed, dEreplaced } := EchoSubfunction(d2result:"_derivE", l1, l2, l3, l4, o, derivE, "DerivE", "HoldERI", ints ,  g, "dE", csl);
    // Echo("//csl po c2h: ":csl);
    //Echo("//csl po g: ":g);
    // Echo("//g na koniec : ":g);
    //#################Koniec###############################

    groupInd := 1;
    ForEach( group , groups ) [
        subG := {};
        ForEach( element , group  ) [
            DestructiveAppend(subG, g[element[1]][element[2]][element[3]][element[4]] );
        ];

        EmitGgroup( l1, l2, l3, l4, o, subG, csl[groupInd], d2result, groupInd );
        groupInd := groupInd + 1;
    ];


    Echo("void second_derivative_ee_" : CppForm(l1) : CppForm(l2) : CppForm(l3) : CppForm(l4) : "_" : CppForm(o[1]): CppForm(o[2]) : "_" : d2result: "(");
    Echo("    const double ae,");
    Echo("    const double xA,");
    Echo("    const double yA,");
    Echo("    const double zA,");
    Echo("    const double be,");
    Echo("    const double xB,");
    Echo("    const double yB,");
    Echo("    const double zB,");
    Echo("    const double ce,");
    Echo("    const double xC,");
    Echo("    const double yC,");
    Echo("    const double zC,");
    Echo("    const double de,");
    Echo("    const double xD,");
    Echo("    const double yD,");
    Echo("    const double zD,");
    Echo("    const double* const bs,");
    Echo("    double* const r2,");
    Echo("    double* const c2h,");
    Echo("    double* const ": d2result :")");
    Echo("{");

    Echo("    const double p = ae + be;");
    Echo("    const double q = ce + de;");

    Echo("    const double xP = (ae * xA + be * xB) / p;");
    Echo("    const double yP = (ae * yA + be * yB) / p;");
    Echo("    const double zP = (ae * zA + be * zB) / p;");

    Echo("    const double xQ = (ce * xC + de * xD) / q;");
    Echo("    const double yQ = (ce * yC + de * yD) / q;");
    Echo("    const double zQ = (ce * zC + de * zD) / q;");

    Echo("    double dE[": String(Length(dEprocessed) + Length(dEreplaced)): "];");
    Echo("    double d2r2[": String(Length(d2r2processed) + Length(d2r2replaced)): "];");
    Echo("    double dr2[": String(Length(dr2processed) + Length(dr2processed)): "];");

    Echo("    second_derivative_ee_" : CppForm(l1) : CppForm(l2) : CppForm(l3) : CppForm(l4) : "_" : CppForm(o[1]): CppForm(o[2]) : "_" : d2result: "_d2r2(");
    Echo("    ae, xA, yA, zA, be, xB, yB, zB, ce, xC, yC, zC, de, xD, yD, zD, bs, d2r2);");

    Echo("    second_derivative_ee_" : CppForm(l1) : CppForm(l2) : CppForm(l3) : CppForm(l4) : "_" : CppForm(o[1]): CppForm(o[2]) : "_" : d2result: "_dr2(");
    Echo("    ae, xA, yA, zA, be, xB, yB, zB, ce, xC, yC, zC, de, xD, yD, zD, bs, dr2);");

    Echo("    second_derivative_ee_" : CppForm(l1) : CppForm(l2) : CppForm(l3) : CppForm(l4) : "_" : CppForm(o[1]): CppForm(o[2]) : "_" : d2result: "_derivE(");
    Echo("    ae, xA, yA, zA, be, xB, yB, zB, ce, xC, yC, zC, de, xD, yD, zD, bs, c2h, dE);");

    For( groupInd := 1 , groupInd <= Length(groups) , groupInd := groupInd + 1 ) [
        group := groups[groupInd];
        Echo("    double g":CppForm(groupInd) :"[":String(Length(group)):"];");
        Echo("    second_derivative_ee_" : CppForm(l1) : CppForm(l2) : CppForm(l3) : CppForm(l4) : "_" : CppForm(o[1]): CppForm(o[2]) : "_" : d2result: "_" : CppForm(groupInd) :"(");
        Echo("    ae, xA, yA, zA, be, xB, yB, zB, ce, xC, yC, zC, de, xD, yD, zD, bs, r2, dr2, d2r2, c2h, dE, g" : CppForm(groupInd)  :" );");

        For( elInd := 1 , elInd <= Length(group) , elInd := elInd +1  ) [
            element := group[elInd];
            g[element[1]][element[2]][element[3]][element[4]] := Atom( "g":CppForm(groupInd) :"[":String(elInd-1):"]" );
        ];
        
    ];

    // g := CSE'SubstituteTaggedSubexpressions(csl, g);
    // {g, c} := CSE(g);
    // csl := Concat(csl, c);
    // Echo("//gowno");
    // Echo("//csl": csl);
    // edges := {};
    // //keys := Transpose(csl)[1];
    // keys := Association'Create();
    // t:= Transpose(csl)[1];
    // ForEach(i, 1 .. Length(t))
    //     Association'Set(keys, t[i], i);
    
    // ForEach (i, 1 .. Length(csl)) [
    //     vars := VarList(Eval(UnList(csl[i][2])));

    //     ForEach (var, vars) [
    //         j := Association'Get(keys, var);
    //         //j := Find(keys, var);
    //         If (j > 0, DestructiveAppend(edges, {j, i}));
    //     ];

    // ];
    // Echo("//dupa");
    // Echo("//Do sortowania topologicznego wchodzi: csl", csl);
    // Echo("//Do sortowania topologicznego wchodzi: edges ", edges);

    // If (edges != {}, csl := TopologicalSort'Kahn(csl, edges) );

    // //Echo("//Z sortowania topologicznego wychodzi: csl ", csl);
    // //Echo("//Czas: sortowanie topologiczne: ",time8);
    // Echo("//dupa2");
    // ForEach(d, CSE'EmitDefinitions(CSE'GenerateAssignments(csl)))
    //         WriteString("    " : d : Nl());
    
    A1 := CartesianToSphericalMatrix[l1 + 1];
    A2 := CartesianToSphericalMatrix[l2 + 1];
    A3 := CartesianToSphericalMatrix[l3 + 1];
    A4 := CartesianToSphericalMatrix[l4 + 1];

    resultWritten := 0;
    // Echo("//dupa3");
    For(i' := 0, i' < 2 * l1 + 1, i'++) [
        For(j' := 0, j' < 2 * l2 + 1, j'++) [
            For(k' := 0, k' < 2 * l3 + 1, k'++) [
                For(l' := 0, l' < 2 * l4 + 1, l'++) [
                    newResult := 0;
                    For(i := 0, i < (l1 + 1) * (l1 + 2) / 2, i++) [
                        If ( Not IsZero(N(A1[i'+1][i+1])),
                            For(j := 0, j < (l2 + 1) * (l2 + 2) / 2, j++) [
                                If ( Not IsZero(N(A2[j'+1][j+1] )) ,
                                    For(k := 0, k < (l3 + 1) * (l3 + 2) / 2, k++) [
                                        If ( Not IsZero(N(A3[k'+1][k+1] )) ,
                                            For(l := 0, l < (l4 + 1) * (l4 + 2) / 2, l++) [

                                                a := A1[i'+1][i+1] * A2[j'+1][j+1] * A3[k'+1][k+1] * A4[l'+1][l+1];

                                                a := N(a);
                                                If (Not IsZero(a),
                                                    newResult := newResult + a * g[i + 1][j + 1][k + 1][l + 1]
                                                );
                                            ]
                                        );
                                    ]
                                );
                            ]
                        );
                    ];
                        WriteString("    ":d2result:"[" : String(resultWritten) : "] += " : CppForm(newResult) : ";" : Nl());
                    resultWritten := resultWritten+1;
                ];
            ];
        ];
    ];
    
    
    Echo("}");
];